{
  "id": "iot-tank-monitoring",
  "label": "IoT Tank Level Monitoring",
  "nodes": [
    {
      "id": "tank1_sensor",
      "type": "mqtt in",
      "z": "iot-tank-monitoring",
      "name": "Tank 1 Sensor",
      "topic": "sensors/tank1",
      "qos": "1",
      "datatype": "json",
      "broker": "mqtt_broker",
      "x": 120,
      "y": 100,
      "wires": [["tank1_processor", "tank1_database"]]
    },
    {
      "id": "tank1_processor",
      "type": "function",
      "z": "iot-tank-monitoring",
      "name": "Process Tank Data",
      "func": "// Process incoming tank sensor data - send RAW data only\nconst msg = {\n    payload: {\n        id: 'tank-1',\n        sensorId: msg.payload.sensorId || 'TANK001',\n        timestamp: new Date().toISOString(),\n        // Raw sensor readings - dashboard will calculate derived values\n        levelRaw: msg.payload.levelRaw || 0,\n        temperatureRaw: msg.payload.temperatureRaw || 0,\n        pressureRaw: msg.payload.pressureRaw || 0,\n        flowRateRaw: msg.payload.flowRateRaw || 0,\n        // Sensor metadata\n        sensorType: msg.payload.sensorType || 'ultrasonic',\n        unit: msg.payload.unit || 'ADC'\n    }\n};\n\nreturn msg;",
      "outputs": 1,
      "noerr": 0,
      "x": 320,
      "y": 100,
      "wires": [["format_tank_websocket", "api_response"]]
    },
    {
      "id": "tank1_database",
      "type": "influxdb out",
      "z": "iot-tank-monitoring",
      "influxdb": "influxdb_config",
      "name": "Store Tank Data",
      "measurement": "tank_levels",
      "tags": "tank_id=tank1",
      "x": 320,
      "y": 160,
      "wires": []
    },
    {
      "id": "flow_meter1_sensor",
      "type": "mqtt in",
      "z": "iot-tank-monitoring",
      "name": "Flow Meter 1",
      "topic": "sensors/flowmeter1",
      "qos": "1",
      "datatype": "json",
      "broker": "mqtt_broker",
      "x": 120,
      "y": 220,
      "wires": [["flow_meter1_processor", "flow_meter1_database"]]
    },
    {
      "id": "flow_meter1_processor",
      "type": "function",
      "z": "iot-tank-monitoring",
      "name": "Process Flow Meter",
      "func": "// Process incoming flow meter data - send RAW data only\nconst msg = {\n    payload: {\n        id: 'flow-meter-1',\n        sensorId: msg.payload.sensorId || 'FLOW001',\n        timestamp: new Date().toISOString(),\n        // Raw sensor readings - dashboard will calculate derived values\n        pulseCount: msg.payload.pulseCount || 0,\n        temperatureRaw: msg.payload.temperatureRaw || 0,\n        pressureRaw: msg.payload.pressureRaw || 0,\n        // Sensor metadata\n        sensorType: msg.payload.sensorType || 'hall_effect',\n        pulsePerLiter: msg.payload.pulsePerLiter || 100,\n        unit: msg.payload.unit || 'pulses'\n    }\n};\n\nreturn msg;",
      "outputs": 1,
      "noerr": 0,
      "x": 320,
      "y": 220,
      "wires": [["dashboard_websocket", "api_response"]]
    },
    {
      "id": "flow_meter1_database",
      "type": "influxdb out",
      "z": "iot-tank-monitoring",
      "influxdb": "influxdb_config",
      "name": "Store Flow Data",
      "measurement": "flow_meters",
      "tags": "meter_id=flowmeter1",
      "x": 320,
      "y": 280,
      "wires": []
    },
    {
      "id": "dashboard_websocket",
      "type": "websocket out",
      "z": "iot-tank-monitoring",
      "name": "Dashboard Updates",
      "server": "websocket_server",
      "client": "",
      "x": 520,
      "y": 160,
      "wires": []
    },
    {
      "id": "format_tank_websocket",
      "type": "function",
      "z": "iot-tank-monitoring",
      "name": "Format Tank WebSocket",
      "func": "// Format tank data for WebSocket - send RAW sensor data\nconst msg = {\n    payload: {\n        type: 'tank_update',\n        timestamp: new Date().toISOString(),\n        payload: {\n            id: msg.payload.id,\n            sensorId: msg.payload.sensorId,\n            timestamp: msg.payload.timestamp,\n            levelRaw: msg.payload.levelRaw,\n            temperatureRaw: msg.payload.temperatureRaw,\n            pressureRaw: msg.payload.pressureRaw,\n            flowRateRaw: msg.payload.flowRateRaw,\n            sensorType: msg.payload.sensorType,\n            unit: msg.payload.unit\n        }\n    }\n};\n\nreturn msg;",
      "outputs": 1,
      "noerr": 0,
      "x": 420,
      "y": 100,
      "wires": [["dashboard_websocket"]]
    },
    {
      "id": "api_response",
      "type": "http response",
      "z": "iot-tank-monitoring",
      "name": "API Response",
      "statusCode": "200",
      "headers": {},
      "x": 520,
      "y": 100,
      "wires": []
    },
    {
      "id": "api_tanks_get",
      "type": "http in",
      "z": "iot-tank-monitoring",
      "name": "GET /api/tanks",
      "url": "/api/tanks",
      "method": "get",
      "upload": false,
      "swaggerDoc": "",
      "x": 120,
      "y": 340,
      "wires": [["get_tanks_from_db"]]
    },
    {
      "id": "get_tanks_from_db",
      "type": "influxdb in",
      "z": "iot-tank-monitoring",
      "name": "Query Tanks",
      "influxdb": "influxdb_config",
      "query": "SELECT * FROM tank_levels WHERE time > now() - 1m GROUP BY tank_id ORDER BY time DESC",
      "x": 320,
      "y": 340,
      "wires": [["format_tanks_response"]]
    },
    {
      "id": "format_tanks_response",
      "type": "function",
      "z": "iot-tank-monitoring",
      "name": "Format Response",
      "func": "// Format tanks data for API response - return RAW sensor data\nconst tanks = msg.payload.map(series => {\n    const latest = series.values[0];\n    return {\n        id: series.tags.tank_id,\n        sensorId: `SENSOR_${series.tags.tank_id.toUpperCase()}`,\n        timestamp: new Date(latest[0]).toISOString(),\n        // Raw sensor readings - dashboard will calculate derived values\n        levelRaw: latest[1] || 0,\n        temperatureRaw: latest[2] || 0,\n        pressureRaw: latest[3] || 0,\n        flowRateRaw: latest[4] || 0,\n        // Sensor metadata\n        sensorType: 'ultrasonic',\n        unit: 'ADC'\n    };\n});\n\nmsg.payload = {\n    data: tanks,\n    status: 'success',\n    timestamp: new Date().toISOString()\n};\n\nreturn msg;",
      "outputs": 1,
      "noerr": 0,
      "x": 520,
      "y": 340,
      "wires": [["api_tanks_response"]]
    },
    {
      "id": "api_tanks_response",
      "type": "http response",
      "z": "iot-tank-monitoring",
      "name": "Tanks API Response",
      "statusCode": "200",
      "headers": {},
      "x": 720,
      "y": 340,
      "wires": []
    },
    {
      "id": "system_status_timer",
      "type": "inject",
      "z": "iot-tank-monitoring",
      "name": "System Status Check",
      "props": [
        {
          "p": "payload"
        }
      ],
      "repeat": "30",
      "crontab": "",
      "once": false,
      "onceDelay": 0.1,
      "topic": "",
      "payload": "",
      "payloadType": "date",
      "x": 120,
      "y": 400,
      "wires": [["check_system_status"]]
    },
    {
      "id": "check_system_status",
      "type": "function",
      "z": "iot-tank-monitoring",
      "name": "Check System Status",
      "func": "// Check overall system status and send heartbeat\nconst msg = {\n    payload: {\n        type: 'heartbeat',\n        timestamp: new Date().toISOString(),\n        data: {\n            overallStatus: 'online',\n            activeSensors: 5,\n            totalSensors: 5,\n            lastHeartbeat: new Date().toISOString(),\n            alerts: []\n        }\n    }\n};\n\nreturn msg;",
      "outputs": 1,
      "noerr": 0,
      "x": 320,
      "y": 400,
      "wires": [["websocket_server", "api_response"]]
    },
    {
      "id": "websocket_server",
      "type": "websocket-listener",
      "z": "iot-tank-monitoring",
      "path": "/ws/data",
      "wholeMsg": "false",
      "x": 520,
      "y": 400,
      "wires": []
    },
    {
      "id": "mqtt_broker",
      "type": "mqtt-broker",
      "z": "iot-tank-monitoring",
      "name": "MQTT Broker",
      "broker": "localhost",
      "port": "1883",
      "clientid": "",
      "autoConnect": true,
      "usetls": false,
      "protocolVersion": "4",
      "keepalive": "60",
      "cleansession": true,
      "birthTopic": "",
      "birthQos": "0",
      "birthPayload": "",
      "birthMsg": {},
      "closeTopic": "",
      "closeQos": "0",
      "closePayload": "",
      "closeMsg": {},
      "willTopic": "",
      "willQos": "0",
      "willPayload": "",
      "willMsg": {},
      "userProps": "",
      "sessionExpiry": ""
    },
    {
      "id": "influxdb_config",
      "type": "influxdb",
      "z": "iot-tank-monitoring",
      "hostname": "localhost",
      "port": "8086",
      "protocol": "http",
      "database": "iot_tanks",
      "name": "InfluxDB",
      "usetls": false,
      "tls": "",
      "influxdbVersion": "1.x",
      "url": "",
      "rejectUnauthorized": false
    }
  ],
  "configs": [
    {
      "id": "mqtt_broker",
      "type": "mqtt-broker",
      "name": "MQTT Broker",
      "broker": "localhost",
      "port": "1883",
      "autoConnect": true
    },
    {
      "id": "influxdb_config",
      "type": "influxdb",
      "name": "InfluxDB",
      "hostname": "localhost",
      "port": "8086",
      "database": "iot_tanks"
    }
  ]
} 